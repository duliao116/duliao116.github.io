(window.webpackJsonp=window.webpackJsonp||[]).push([[38],{405:function(s,t,a){"use strict";a.r(t);var n=a(45),e=Object(n.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h2",{attrs:{id:"工作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#工作"}},[s._v("#")]),s._v(" 工作")]),s._v(" "),a("h3",{attrs:{id:"spring-web-test"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-web-test"}},[s._v("#")]),s._v(" Spring Web Test")]),s._v(" "),a("p",[s._v("最近一直在想怎么在测试controller层的时候不实例化service和数据库等依赖，今天就专门研究了一下。发现强大的Spring已经给我们提供了专门测试Controller层的方式，详见"),a("a",{attrs:{href:"https://spring.io/guides/gs/testing-web/",target:"_blank",rel:"noopener noreferrer"}},[s._v("测试 Web 层"),a("OutboundLink")],1),s._v("。")]),s._v(" "),a("p",[s._v("之前是设想的把Service的接口定义和实现分离，让controller单独依赖Service接口的想法，然后给测试单独定义一个application，这样可以指定扫描的包，只扫描controller和service接口所在的包，这样就避免了测试一个controller接口也要实例化所有的bean和其它依赖的资源（数据库、redis、mq、注册中心等等）。不成想spring已经实现了，逻辑差不多，单独定义了一个测试用注解"),a("br"),s._v(" "),a("code",[s._v("@WebMvcTest")]),s._v("，这个注解可以只扫描@Controller相关的注解，给予实例化，其它@Service注解、@Repository注解都不扫描，比指定包名更加的方便。而且这个注解可以单独指定特定的Controller类做测试，Spring容器就会只实例化指定的类，不会实例化其它的Controller类。果然，这种活还是框架给做比较好，完美解决依赖问题。")]),s._v(" "),a("p",[s._v("这个注解呢，有个问题，使用junit5的话在类上面只注解这个就可以了")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@WebMvcTest")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("WebMockTest")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("但是使用junit4的话，就得在上面多加一个注解")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Runwith")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("SpringRunner")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@WebMvcTest")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("WebMockTest")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("至此，controller层单元测试可以算是有眉目了，后续要完善用例，规范即可。")])])}),[],!1,null,null,null);t.default=e.exports}}]);